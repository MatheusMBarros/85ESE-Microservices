version: "3.8"

services:
  # MongoDB Service (para o Auth Service)
  mongodb:
    image: mongo:latest
    container_name: mongodb_auth_service
    ports:
      - "27017:27017" # Porta padrão do MongoDB
    volumes:
      - mongo_data_auth:/data/db # Volume para persistência dos dados do MongoDB
    networks:
      - minha_rede_app

  # API Gateway Service
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway_service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - AGENDA_SERVICE_URL=http://agenda-service:3003
      - JWT_SECRET=SEU_SUPER_SEGREDO_JWT_AQUI_MUDE_ISSO # IMPORTANTE: DEVE SER O MESMO DO AUTH-SERVICE!
    volumes: # Volumes para hot-reloading em desenvolvimento
      - ./api-gateway:/usr/src/app
      - /usr/src/app/node_modules # Impede que o node_modules do host sobrescreva o do contêiner
    command: npm run dev # Executa nodemon para hot-reloading
    depends_on:
      - auth-service
      - user-service
      - agenda-service
    networks:
      - minha_rede_app

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - JWT_SECRET=SEU_SUPER_SEGREDO_JWT_AQUI_MUDE_ISSO # IMPORTANTE: DEVE SER O MESMO DO API-GATEWAY!
      - MONGO_URI=mongodb://mongodb_auth_service:27017/authdb # Aponta para o serviço MongoDB
    volumes: # Volumes para hot-reloading em desenvolvimento
      - ./auth-service:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev # Executa nodemon para hot-reloading
    depends_on:
      - mongodb # Depende do MongoDB
    networks:
      - minha_rede_app

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - DB_NAME=users_db
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_HOST=postgres_user_service # Aponta para o serviço PostgreSQL
    volumes: # Volumes para hot-reloading em desenvolvimento
      - ./user-service:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev # Executa nodemon para hot-reloading
    depends_on:
      - postgres_user_service # Depende do PostgreSQL
    networks:
      - minha_rede_app

  # PostgreSQL para User Service
  postgres_user_service:
    image: postgres:14
    container_name: postgres_user_service
    restart: always
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432" # Expõe na porta 5433 do host
    volumes:
      - pgdata_user:/var/lib/postgresql/data # Volume para persistência de dados
    networks:
      - minha_rede_app

  # Agenda Service
  agenda-service:
    build:
      context: ./agenda-service
      dockerfile: Dockerfile
    container_name: agenda_service
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - DB_NAME=agendas_db
      - DB_USER=postgres
      - DB_PASS=postgres
      - DB_HOST=postgres_agenda_service
    volumes: # Volumes para hot-reloading em desenvolvimento
      - ./agenda-service:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev # Executa nodemon para hot-reloading
    depends_on:
      - postgres_agenda_service # Depende do PostgreSQL
    networks:
      - minha_rede_app

  # PostgreSQL para Agenda Service
  postgres_agenda_service:
    image: postgres:14
    container_name: postgres_agenda_service
    restart: always
    environment:
      POSTGRES_DB: agendas_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432" # Expõe na porta 5434 do host
    volumes:
      - pgdata_agenda:/var/lib/postgresql/data # Volume para persistência de dados
    networks:
      - minha_rede_app

  # --- Adição do Prometheus Service ---
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_monitor
    ports:
      - "9090:9090" # Porta para acessar a UI do Prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Mapeia o arquivo de configuração
    command:
      - "--config.file=/etc/prometheus/prometheus.yml" # Argumento para carregar a configuração
    depends_on:
      - api-gateway # Garante que os serviços estejam rodando antes do Prometheus tentar raspá-los
      - auth-service
      - user-service
      - agenda-service
    networks:
      - minha_rede_app

  # --- Adição do Grafana Service ---
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_dashboard
    ports:
      - "3008:3000" # Porta para acessar a UI do Grafana (pode conflitar com o gateway se rodar localmente)
      # Se a porta 3000 já estiver em uso pelo gateway no seu host, mude para:
      # - "3001:3000" ou outra porta disponível no host
    volumes:
      - grafana_data:/var/lib/grafana # Volume persistente para dados do Grafana
    depends_on:
      - prometheus # Grafana precisa do Prometheus como fonte de dados
    networks:
      - minha_rede_app

volumes:
  mongo_data_auth:
  pgdata_user:
  pgdata_agenda:
  grafana_data: # Novo volume para persistir dados do Grafana

networks:
  minha_rede_app:
    driver: bridge
